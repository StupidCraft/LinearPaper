From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Triassic <techbyteofficial9@gmail.com>
Date: Sun, 12 May 2024 17:31:52 +0300
Subject: [PATCH] Empty configuration


diff --git a/src/main/java/com/triassic/linearpaper/LinearConfig.java b/src/main/java/com/triassic/linearpaper/LinearConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..ad7400a1d200ff93c75d44d4c5b06cc4172d305b
--- /dev/null
+++ b/src/main/java/com/triassic/linearpaper/LinearConfig.java
@@ -0,0 +1,173 @@
+package com.triassic.linearpaper;
+
+import com.google.common.collect.ImmutableMap;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+@SuppressWarnings("unused")
+public class LinearConfig {
+
+    private static File CONFIG_FILE;
+    private static final List<String> HEADER = List.of(
+        "Linear Region Format Configuration File",
+        "",
+        "Linear is an experimental region file format that",
+        "may, or may not, break your server. Please remember",
+        "to always keep and create backups, even if not using Linear.",
+        "",
+        "Report any issues on our GitHub repository:",
+        "https://github.com/RealTriassic/LinearPaper"
+    );
+
+    public static YamlConfiguration config;
+    static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        if (configFile.exists()) {
+            try {
+                config.load(CONFIG_FILE);
+            } catch (InvalidConfigurationException ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Could not load linear.yml, please correct your syntax errors", ex);
+                throw new RuntimeException(ex);
+            } catch (IOException ignore) {}
+        }
+        config.options()
+            .setHeader(HEADER)
+            .copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig(LinearConfig.class, null);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw new RuntimeException(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    protected static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    protected static String getString(String path, String def, String... comment) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    protected static boolean getBoolean(String path, boolean def, String... comment) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    protected static double getDouble(String path, double def, String... comment) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    protected static int getInt(String path, int def, String... comment) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    protected static <T> List<?> getList(String path, T def, String... comment) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def, String... comment) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    protected static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    protected static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    protected static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    protected static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    protected static <T> List<?> getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    protected static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+}
diff --git a/src/main/java/com/triassic/linearpaper/LinearWorldConfig.java b/src/main/java/com/triassic/linearpaper/LinearWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..562200dd06f5c30219746be01441a7de69c8757d
--- /dev/null
+++ b/src/main/java/com/triassic/linearpaper/LinearWorldConfig.java
@@ -0,0 +1,113 @@
+package com.triassic.linearpaper;
+
+import java.util.List;
+import java.util.Map;
+import java.util.function.Predicate;
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.configuration.ConfigurationSection;
+
+import static com.triassic.linearpaper.LinearConfig.log;
+
+@SuppressWarnings("unused")
+public class LinearWorldConfig {
+
+    private final String worldName;
+
+    public LinearWorldConfig(String worldName) {
+        this.worldName = worldName;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + worldName + "] --------");
+        LinearConfig.readConfig(LinearWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        LinearConfig.config.addDefault("world-settings.default." + path, val);
+        LinearConfig.config.set("world-settings.default." + path, val);
+        if (LinearConfig.config.get("world-settings." + worldName + "." + path) != null) {
+            LinearConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+            LinearConfig.config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    protected ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = LinearConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+        return section != null ? section : LinearConfig.config.getConfigurationSection("world-settings.default." + path);
+    }
+
+    protected String getString(String path, String def, String... comment) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getString("world-settings." + worldName + "." + path, LinearConfig.config.getString("world-settings.default." + path));
+    }
+
+    protected boolean getBoolean(String path, boolean def, String... comment) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getBoolean("world-settings." + worldName + "." + path, LinearConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    protected boolean getBoolean(String path, Predicate<Boolean> predicate, String... comment) {
+        String val = getString(path, "default", comment).toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    protected double getDouble(String path, double def, String... comment) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getDouble("world-settings." + worldName + "." + path, LinearConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    protected int getInt(String path, int def, String... comment) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getInt("world-settings." + worldName + "." + path, LinearConfig.config.getInt("world-settings.default." + path));
+    }
+
+    protected <T> List<?> getList(String path, T def, String... comment) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getList("world-settings." + worldName + "." + path, LinearConfig.config.getList("world-settings.default." + path));
+    }
+
+    protected Map<String, Object> getMap(String path, Map<String, Object> def, String... comment) {
+        final Map<String, Object> fallback = getMap("world-settings.default." + path, def, comment);
+        final Map<String, Object> value = getMap("world-settings." + worldName + "." + path, null, comment);
+        return value.isEmpty() ? fallback : value;
+    }
+
+    protected String getString(String path, String def) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getString("world-settings." + worldName + "." + path, LinearConfig.config.getString("world-settings.default." + path));
+    }
+
+    protected boolean getBoolean(String path, boolean def) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getBoolean("world-settings." + worldName + "." + path, LinearConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+        String val = getString(path, "default").toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    protected double getDouble(String path, double def) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getDouble("world-settings." + worldName + "." + path, LinearConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    protected int getInt(String path, int def) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getInt("world-settings." + worldName + "." + path, LinearConfig.config.getInt("world-settings.default." + path));
+    }
+
+    protected <T> List<?> getList(String path, T def) {
+        LinearConfig.config.addDefault("world-settings.default." + path, def);
+        return LinearConfig.config.getList("world-settings." + worldName + "." + path, LinearConfig.config.getList("world-settings.default." + path));
+    }
+
+    protected Map<String, Object> getMap(String path, Map<String, Object> def) {
+        final Map<String, Object> fallback = getMap("world-settings.default." + path, def);
+        final Map<String, Object> value = getMap("world-settings." + worldName + "." + path, null);
+        return value.isEmpty() ? fallback : value;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 17a158ff6ce6520b69a5a0032ba4c05449dd0cf8..f604ff221ca1c9115fe2880520339655cd74cf15 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -224,6 +224,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.paperConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
         // Paper end - initialize global and world-defaults configuration
         this.server.spark.enableEarlyIfRequested(); // Paper - spark
+        com.triassic.linearpaper.LinearConfig.init((java.io.File) this.options.valueOf("linear-settings")); // LinearPaper
         // Paper start - fix converting txt to json file; convert old users earlier after PlayerList creation but before file load/save
         if (this.convertOldUsers()) {
             this.getProfileCache().save(false); // Paper
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 022de445bbbb869c38be4972c98dcf1c665539ec..50fd1804ca1291d7bedb42dc8d64b4bef8531d1c 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -172,6 +172,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
         return this.paperConfig;
     }
     // Paper end - add paper world config
+    public final com.triassic.linearpaper.LinearWorldConfig linearConfig; // LinearPaper
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public static BlockPos lastPhysicsProblem; // Spigot
@@ -842,6 +843,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
         // Paper end - getblock optimisations - cache world height/sections
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper - create paper world config
+        this.linearConfig = new com.triassic.linearpaper.LinearWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // LinearPaper
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9f9eefc7346838a9effcda861cecd098092efb0f..4750ea4373e5dbf3a05854b3677d116911ee9ea3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1089,6 +1089,7 @@ public final class CraftServer implements Server {
                 }
             }
             world.spigotConfig.init(); // Spigot
+            world.linearConfig.init(); // LinearPaper
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -3009,6 +3010,12 @@ public final class CraftServer implements Server {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
 
+        @Override
+        public YamlConfiguration getLinearConfig()
+        {
+            return com.triassic.linearpaper.LinearConfig.config;
+        }
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index a7524d3853d5b67b6385d2b74832b9267503dfe6..0d5a7feee04206f75f07f12dcf38616899232794 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -183,6 +183,14 @@ public class Main {
                         .defaultsTo("Unknown Server")
                         .describedAs("Name");
                 // Paper end
+
+                // LinearPaper start
+                acceptsAll(asList("linear", "linear-settings"), "File for Linear settings")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                    .defaultsTo(new File(io.papermc.paper.configuration.PaperConfigurations.CONFIG_DIR, "linear.yml"))
+                    .describedAs("Yml file");
+                // LinearPaper end
             }
         };
 
